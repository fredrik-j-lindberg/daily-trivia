// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

model Question {
    id         String   @id @default(cuid())
    question   String   @unique
    difficulty String?
    category   String?
    type       String?
    insertedAt DateTime @default(now())

    options QuestionOption[]
}

model QuestionOption {
    id         String  @id @default(cuid())
    questionId String
    value      String
    isCorrect  Boolean

    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([questionId, value])
}

model TriviaStats {
    userId      String   @id @unique
    correct_0   Int      @default(0)
    correct_1   Int      @default(0)
    correct_2   Int      @default(0)
    correct_3   Int      @default(0)
    timesPlayed Int      @default(0)
    streak      Int      @default(0)
    maxStreak   Int      @default(0)
    lastPlayed  DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    triviaStats   TriviaStats?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
